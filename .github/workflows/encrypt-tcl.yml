name: Encrypt Tcl Scripts

on:
  push:
    paths:
      - 'src/**/*.tcl'
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering
    inputs:
      specific_file:
        description: '要加密的特定文件路径 (例如: src/example.tcl)，留空则加密所有文件'
        required: false
        default: ''
      release_name:
        description: '发布名称 (默认: Encrypted Tcl Scripts)'
        required: false
        default: 'Encrypted Tcl Scripts'
      create_release:
        description: '是否创建 GitHub Release'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  encrypt-and-release:
    runs-on: ubuntu-latest
    # 不使用容器，因为我们将在工作流中使用 Docker

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Docker Installation
        run: |
          # GitHub Actions 运行器已经预装了 Docker
          docker --version
          docker info

      - name: Create Dockerfile for TclPro
        run: |
          # 创建一个使用旧版 CentOS 6 的 Dockerfile
          cat > Dockerfile << 'EOF'
          FROM centos:6

          # 安装必要的依赖项
          RUN yum -y update && \
              yum -y install tcl expect libX11 libXScrnSaver libXt libXmu libXft libXext libXrender fontconfig libXpm libSM libICE which file findutils glibc-devel

          # 创建工作目录
          WORKDIR /app

          # 复制 TclPro 和 Tcl 脚本
          COPY ./tclpro1.4 /app/tclpro1.4/
          COPY ./src /app/src/

          # 创建输出目录
          RUN mkdir -p /app/output

          # 创建安装脚本
          RUN echo '#!/bin/bash\n\
          mkdir -p /opt/tclpro1.4\n\
          cd /app\n\
          ./tclpro1.4/setup.sh -Text << EOF\n\
          y\n\
          /opt/tclpro1.4\n\
          y\n\
          EOF\n\
          ' > /app/install_tclpro.sh && \
              chmod +x /app/install_tclpro.sh

          # 创建加密脚本
          RUN echo '#!/bin/bash\n\
          # 查找 procomp 工具\n\
          PROCOMP_PATH=$(find /opt/tclpro1.4 -name "procomp" -type f | head -1)\n\
          if [ -z "$PROCOMP_PATH" ]; then\n\
            echo "Error: procomp not found"\n\
            exit 1\n\
          fi\n\
          \n\
          # 加密所有 Tcl 脚本\n\
          find /app/src -name "*.tcl" | while read tcl_file; do\n\
            rel_path=$(dirname "$tcl_file" | sed "s|^/app/src/||")\n\
            filename=$(basename "$tcl_file" .tcl)\n\
            mkdir -p "/app/output/$rel_path"\n\
            "$PROCOMP_PATH" "$tcl_file" -o "/app/output/$rel_path/$filename.tbc"\n\
            echo "Encrypted $tcl_file to /app/output/$rel_path/$filename.tbc"\n\
          done\n\
          ' > /app/encrypt_tcl.sh && \
              chmod +x /app/encrypt_tcl.sh

          # 设置入口点
          CMD ["/bin/bash", "-c", "/app/install_tclpro.sh && /app/encrypt_tcl.sh"]
          EOF

          # 显示 Dockerfile 内容
          cat Dockerfile

      - name: Build and Run Docker Image
        run: |
          # 构建 Docker 镜像
          docker build -t tclpro-centos6 .

          # 运行 Docker 容器
          docker run --name tclpro-container tclpro-centos6

          # 从容器中复制加密后的文件
          docker cp tclpro-container:/app/output .

          # 显示加密后的文件
          find output -type f | sort

          # 检查是否有加密后的文件
          if [ -z "$(find output -type f)" ]; then
            echo "Error: No encrypted files were generated!"
            exit 1
          fi



      - name: Check Encrypted Files
        run: |
          # 检查加密后的文件
          echo "\n\n===== 检查加密后的文件 ====="
          find output -type f -name "*.tbc" | sort

          # 显示文件内容示例
          if [ -n "$(find output -type f -name "*.tbc" | head -1)" ]; then
            SAMPLE_FILE=$(find output -type f -name "*.tbc" | head -1)
            echo "\n\n===== 文件内容示例: $SAMPLE_FILE ====="
            head -10 "$SAMPLE_FILE"
          fi

      - name: Verify encryption
        run: |
          echo "Listing encrypted TBC files:"
          find output -name "*.tbc" -type f | sort

          # Count the number of encrypted files
          TBC_COUNT=$(find output -name "*.tbc" -type f | wc -l)
          echo "Total TBC files generated: $TBC_COUNT"

          # Verify that we have at least one TBC file
          if [ "$TBC_COUNT" -eq 0 ]; then
            echo "Error: No TBC files were generated!"
            exit 1
          fi

          # 显示 Docker 容器的日志
          echo "\n\n===== Docker 容器日志 ====="
          docker logs tclpro-container

      - name: Create Release
        id: create_release
        if: ${{ github.event.inputs.create_release != 'false' }}
        uses: softprops/action-gh-release@v1
        with:
          files: output/**/*.tbc
          name: ${{ github.event.inputs.release_name != '' && github.event.inputs.release_name || 'Encrypted Tcl Scripts' }} ${{ github.run_number }}
          tag_name: v${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts without creating release
        if: ${{ github.event.inputs.create_release == 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: encrypted-tcl-files
          path: output/**/*.tbc
          retention-days: 30
